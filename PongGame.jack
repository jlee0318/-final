// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/11/Pong/PongGame.jack

/**
 * The Pong game.
 */
class PongGame {

    // The singlton 
    static PongGame instance;

    // The bat
    field Bat bat1;
    field Bat bat2;


    // The current wall that the ball is bouncing from.
    field int wall;

    // True when the game is over
    field boolean exit;

    // The current score.
    field int score;

    // The last wall that the ball bounced from.
    field int lastWall;

    // The current width of the bat
    field int batWidth;

    /** Constructs a new Pong Game. */
    constructor PongGame new() {
        do Screen.clearScreen();

        let batWidth = 7;
        let bat1 = Bat.new(0, 0, batWidth, 50);
        let bat2 = Bat.new(500, 0, batWidth, 50);

        do Screen.drawRectangle(0, 238, 511, 240);
        do Output.moveCursor(22,0);
        do Output.printString("Score: 0");
        
        let exit = false;
        let score = 0;
        let wall = 0;
        let lastWall = 0;

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do bat.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Creates an instance of PongGame and stores it. */
    function void newInstance() {
        let instance = PongGame.new();
        return;
    }
    
    /** Returns the single instance of PongGame. */
    function PongGame getInstance() {
        return instance;
    }

    /** Starts the game. Handles inputs from the user that control
     *  the bat's movement direction. */
    method void run() {
        var char key;

        while (~exit) {
            // waits for a key to be pressed.
            while ((key = 0) & (~exit)) {
                let key = Keyboard.keyPressed();
                do bat1.move();
                do bat2.move();
            }

            if (key = 38) {
	            do bat1.setDirection(2);
                }
	        else {
                if (key = 40) {
                    do bat1.setDirection(2);
                }
                else {
                    if (key = 140) {
                        let exit = true;
                    }
                }
            }

            // Waits for the key to be released.
            while ((~(key = 0)) & (~exit)) {
                let key = Keyboard.keyPressed();
                do bat1.move();
                do bat2.move();
            }
        }

	if (exit) {
    	    do Output.moveCursor(10,27);
	    do Output.printString("Game Over");
	}    
        return;
    }
}